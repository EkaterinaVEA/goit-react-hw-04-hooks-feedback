{"version":3,"sources":["components/Statistics/Statistics.styles.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styles.jsx","components/Section/Main.jsx","components/Section/Section.jsx","components/Container/Container.styles.jsx","components/Container/Container.jsx","components/Button/Button.styles.jsx","components/Button/Button.jsx","components/FeedbackOptions/FeedbackOptions.styles.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styles.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["List","styled","ul","Item","li","Statistics","good","bad","neutral","total","positivePercentage","size","color","Wrapper","section","Title","h2","Section","main","Main","children","title","div","Container","Btn","button","Button","feedback","onClick","type","style","marginBottom","Options","FeedbackOptions","options","onChangeStatistics","Object","keys","map","option","Message","p","Icon","Notification","message","icon","App","useState","setGood","setNeutral","setBad","countTotalFeedback","totalFeedback","Math","round","countPositiveFeedbackPercentage","e","currentTarget","dataset","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f55d462.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction: column;\nfont-size: 20px;\ncolor: #727273;\nalign-items: center;\njustify-content: center;\n`;\nexport const Item = styled.li`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n\nheight: 30px;\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n\n  & svg {\n      margin-left: 10px;\n  }\n`;","import PropTypes from 'prop-types';\nimport { List, Item } from './Statistics.styles';\nimport { RiEmotionHappyLine, RiEmotionNormalLine, RiEmotionUnhappyLine } from \"react-icons/ri\";\nimport {IoIosStats} from \"react-icons/io\";\nimport { FaBalanceScale } from \"react-icons/fa\";\n\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => (\n<List>\n        <Item>\n                Good:{good}\n                <RiEmotionHappyLine size=\"25\" color=\"#00FF00\"/>\n        </Item>\n        <Item>\n                Neutral:{neutral}\n                <RiEmotionNormalLine size=\"25\" color=\"#FFD700\" />\n        </Item>\n        <Item>\n                Bad:{bad}\n                <RiEmotionUnhappyLine size=\"25\" color=\"#ff0000\" />\n        </Item>\n        <Item>\n                Total:{total}\n                <IoIosStats size=\"25\" color=\"#32CD32\" />\n        </Item>\n        <Item>\n                Positive feedback:{positivePercentage}%\n                <FaBalanceScale size=\"25\" color=\"#B8860B\" />\n        </Item>\n</List>\n)\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.section`\npadding: 30px 0;\nwidth: 470px;\n`;\n\nexport const Title = styled.h2`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmargin-top: 30px;\nmargin-bottom: 100px;\nmargin-left: auto;\nmargin-right: auto;\ntext-transform: uppercase;\nfont-size: 32px;\ntext-align: center;\ncolor: #727273;\n& svg {\nmargin-left: 15px;\n}\n`;\n\nexport const Section = styled.main`\ndisplay: flex;\njustify-content: space-around;\nwidth: 1200px;\nborder-radius: 10px;\nborder: 1px solid #f0f0f3;\nmargin: 50px auto 0;\nbackground-color: #f0f0f3;\nbox-shadow: -10px -10px 30px 0 #ffffff, 10px 10px 30px 0 #aeaec040;\n`;","import PropTypes from 'prop-types';\nimport { Section } from './Section.styles'\n\nconst Main = ({ children }) => {\n    return (\n        <Section>\n            {children}\n        </Section>\n    )\n\n}\n\nMain.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Main;","import PropTypes from 'prop-types';\nimport { Wrapper, Title } from './Section.styles';\nimport { VscFeedback, VscGraph } from \"react-icons/vsc\";\n\nconst Section = ({ children, title }) => {\n    return (\n        <Wrapper>\n            {title && (\n                <Title>\n                    {title}\n                    {title === \"Please leave feedback\" && <VscFeedback size=\"35\"/>}\n                    {title === \"Statistics\" && <VscGraph size=\"35\" /> }\n                </Title>\n            )}\n\n            {children}\n        </Wrapper>\n    );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  padding: 0 30px;\n`;","import PropTypes from \"prop-types\";\nimport { Wrapper } from \"./Container.styles\";\n\nconst Container = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;","import styled from \"@emotion/styled\";\n\nexport const Btn = styled.button`\nwidth: 100px;\npadding: 5px 10px;\ndisplay: flex;\ncolor: #727273;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\nborder: 1px solid #f0f0f3;\nborder-radius: 10px;\ncursor: pointer;\noutline: none;\n/* text-transform: capitalize; */\nfont-size: 18px;\nfont-weight: 500;\nbackground-color: transparent;\nbox-shadow: -10px -10px 30px 0 #ffffff, 10px 10px 30px 0 #aeaec040;\ntransition: all 250ms ease-in-out;\n&:hover,\n&:focus-visible {\ntransform: scale(1.2);\n}\n`;","import PropTypes from \"prop-types\";\nimport { Btn } from \"./Button.styles\";\nimport { RiEmotionHappyLine, RiEmotionNormalLine, RiEmotionUnhappyLine } from \"react-icons/ri\";\n\nconst Button = ({ feedback, onClick }) => {\n  return (\n    <Btn type=\"button\" data-feedback={feedback} onClick={onClick}>\n      {feedback === \"good\" && (\n        <RiEmotionHappyLine size=\"30\" color=\"#00FF00\" style={{ marginBottom: 5 }} />\n      )}\n      {feedback === \"neutral\" && (\n        <RiEmotionNormalLine size=\"30\" color=\"#FFD700\" style={{ marginBottom: 5 }} />\n      )}\n      {feedback === \"bad\" && (\n        <RiEmotionUnhappyLine size=\"30\" color=\"#ff0000\" style={{ marginBottom: 5 }} />\n      )}\n      {feedback}\n    </Btn>\n  );\n};\n\nButton.propTypes = {\n  feedback: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;","import styled from \"@emotion/styled\";\n\nexport const Options = styled.ul`\ndisplay: flex;\njustify-content: center;\n`;\n\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-right: 50px;\n  }\n`;","import PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport { Options, Item } from './FeedbackOptions.styles';\n\n\nconst FeedbackOptions = ({ options, onChangeStatistics }) => {\n    options = Object.keys(options);\n\n    return (\n        <Options>\n            {options.map((option) => (\n                <Item key={option}>\n                <Button feedback={option} onClick={onChangeStatistics} />\n                </Item>\n            ))}\n        </Options>\n    );\n}\n\n\nFeedbackOptions.propTypes = {\n    onChangeStatistics: PropTypes.func.isRequired,\n    options: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }).isRequired,\n}\n\nexport default FeedbackOptions;","import styled from \"@emotion/styled\";\n\nexport const Message = styled.p`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ntext-align: center;\nfont-size: 25px;\nfont-weight: 500;\ncolor: #727273;\n`;\n\nexport const Icon = styled.p`\nfont-size: 35px;\nmargin-bottom: 12px;\n`;","import PropTypes from 'prop-types';\nimport {Message, Icon} from './Notification.styles'\n\nconst Notification = ({ message, icon=\"🤷\" }) => {\n  return <Message>\n            {message}   ...\n            <Icon>\n              {icon}\n            </Icon>\n          </Message>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n  icon: PropTypes.string,\n}\n\nexport default Notification;","import './App.css';\nimport Statistics from './components/Statistics/Statistics';\nimport Main from './components/Section/Main';\nimport Section from './components/Section/Section';\nimport Container from './components/Container/Container';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Notification from './components/Notification/Notification';\nimport { useState } from 'react';\n\nfunction App () {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  \n  const handleChangeStatistics = (e) => {\n    const feedback = e.currentTarget.dataset.feedback\n\n    switch (feedback) {\n      case 'good':\n        setGood((prevState) => prevState + 1)\n        break\n      \n      case 'neutral':\n        setNeutral((prevState) => prevState + 1)\n        break\n      \n      case 'bad':\n        setBad((prevState) => prevState + 1)\n        break\n      \n      default:\n        return\n    }\n  }\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad\n  }\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback()\n\n    return Math.round((good * 100) / total)\n  }\n\n  const totalFeedback = countTotalFeedback()\n  const positivePercentage = countPositiveFeedbackPercentage()\n\n  return (\n    <Main>\n      <Section title=\"Please leave feedback\">\n          <Container>\n             <FeedbackOptions\n            options={{good, neutral, bad}}\n            onChangeStatistics={handleChangeStatistics}\n          />\n          </Container>\n      </Section>  \n        \n      <Section title=\"Statistics\">\n          <Container>\n            {totalFeedback > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedback}\n              positivePercentage={positivePercentage}\n            />\n            ) : (\n            <Notification message=\"No feedback given\" />\n            )}\n          </Container>          \n      </Section>     \n    </Main>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}